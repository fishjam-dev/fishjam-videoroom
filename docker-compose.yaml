version: '3.8'

x-fishjam-template: &fishjam-template
  image: "ghcr.io/fishjam-dev/fishjam:${JELLYFISH_VERSION:-edge}"
  restart: unless-stopped
  environment: &fishjam-environment
    JF_SERVER_API_TOKEN: ${JF_SERVER_API_TOKEN:-development}
    JF_CHECK_ORIGIN: "${JF_CHECK_ORIGIN:-false}"
    JF_DIST_ENABLED: "${JF_DIST_ENABLED:-true}"
    JF_DIST_NODES: "app@fishjam1 app@fishjam2"
    JF_WEBRTC_TURN_IP: $EXTERNAL_IP
    JF_WEBRTC_TURN_LISTEN_IP: "0.0.0.0"

services:
  fishjam1:
    <<: *fishjam-template
    container_name: fishjam1
    environment:
      <<: *fishjam-environment
      JF_HOST: "${JF1_HOST:-${JF1_IP:-$EXTERNAL_IP}:5002}"
      JF_PORT: 5002
      JF_DIST_NODE_NAME: app@fishjam1
      JF_WEBRTC_TURN_PORT_RANGE: "50000-50100"
      JF_WEBRTC_TURN_TCP_PORT: "49999"
    ports:
      - "5002:5002"
      - "49999:49999"
      - "50000-50100:50000-50100/udp"

  fishjam2:
    <<: *fishjam-template
    restart: unless-stopped
    container_name: fishjam2
    environment:
      <<: *fishjam-environment
      JF_HOST: "${JF2_HOST:-${JF2_IP:-$EXTERNAL_IP}:5003}"
      JF_PORT: 5003
      JF_DIST_NODE_NAME: app@fishjam2
      JF_WEBRTC_TURN_PORT_RANGE: "50101-50200"
      JF_WEBRTC_TURN_TCP_PORT: "49998"
    ports:
      - "5003:5003"
      - "49998:49998"
      - "50101-50200:50101-50200/udp"

  frontend:
    build:
      context: ./assets
      dockerfile: ./Dockerfile
      args:
        FE_BE_HOST: ${BE_HOST:-$DOMAIN:5004}
        JELLYFISH_VERSION: ${JELLYFISH_VERSION:-0.3.0}
        FISHJAM_ROOM_VERSION: ${FISHJAM_ROOM_VERSION:-build}
    container_name: frontend
    restart: unless-stopped
    depends_on:
      - backend
      - fishjam1
      - fishjam2
    ports:
      - "5005:5005"

  backend:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: backend
    environment:
      BE_PORT: 5004
      BE_HOST: ${BE_HOST:-$DOMAIN}
      BE_PHX_SERVER: "true"
      BE_JF_ADDRESSES: ${BE_JF_ADDRESSES:-fishjam1:5002 fishjam2:5003}
      BE_JF_SECURE_CONNECTION: ${BE_JF_SECURE_CONNECTION:-false}
      BE_JF_SERVER_API_TOKEN: ${JF_SERVER_API_TOKEN:-development}
    restart: unless-stopped
    depends_on:
      - fishjam1
      - fishjam2
    ports:
      - "5004:5004"

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
      args:
        PROM_JELLYFISH_TARGETS: ${PROM_JELLYFISH_TARGETS:-fishjam1:9568,fishjam2:9568}
        # Through 172.17.0.1 address docker containers (not running in network mode host) can access
        # services running on host OS (localhost). In this example through this address prometheus could access
        # node-exporter which is running in network mode host.
        PROM_NODE_TARGETS: '172.17.0.1:9100'
    container_name: prometheus
    restart: on-failure
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - prometheus_data:/prometheus
    depends_on:
      - fishjam1
      - fishjam2

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    container_name: grafana
    restart: on-failure
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
      GF_SECURITY_ADMIN_USER: "${GF_SECURITY_ADMIN_USER}"
    ports:
      - '3000:3000'
    expose:
      - 3000

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node_exporter
    restart: on-failure
    network_mode: host
    command:
      - --path.rootfs=/host
    volumes:
      - /:/host:ro,rslave

  loki:
    build:
      context: ./loki
      dockerfile: Dockerfile
    volumes:
      - loki_data:/loki
    ports:
      - "3100:3100"

  promtail:
    build:
      context: ./promtail
      dockerfile: Dockerfile
      args:
        LOKI_ADDRESS: loki
    volumes:
      # to read container labels and logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers

volumes:
  grafana_data: {}
  prometheus_data: {}
  loki_data: {}
