version: '3'

services:
  jellyfish1:
    image: "ghcr.io/jellyfish-dev/jellyfish:${TAG:-edge}"
    restart: unless-stopped
    container_name: jellyfish1
    environment:
      USE_INTEGRATED_TURN: "true"
      INTEGRATED_TURN_IP: "${EXTERNAL_IP}"
      INTEGRATED_TURN_PORT_RANGE: "50000-50500"
      INTEGRATED_TCP_TURN_PORT: "49999"
      ERLANG_COOKIE: ${SERVER_API_TOKEN}
      SERVER_API_TOKEN: ${SERVER_API_TOKEN}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      VIRTUAL_HOST: "${JELLYFISH_ADDRESS:-$EXTERNAL_IP}"
      PORT: 5002
      RELEASE_COOKIE: ${SERVER_API_TOKEN}
      RELEASE_DISTRIBUTION: name
      RELEASE_NODE: app@$EXTERNAL_IP
      NODE_NAME: app@$EXTERNAL_IP
      NODES: "app@$EXTERNAL_IP app@$JELLYFISH2_IP"
      CHECK_ORIGIN: "${CHECK_ORIGIN:-true}"
    ports:
      - "5002:5002"
      - "49999:49999"
      - "50000-50500:50000-50500/udp"

  # jellyfish2:
  #   image: "ghcr.io/jellyfish-dev/jellyfish:${TAG:-edge}"
  #   restart: unless-stopped
  #   container_name: jellyfish2
  #   environment:
  #     USE_INTEGRATED_TURN: "true"
  #     INTEGRATED_TURN_IP: "${JELLYFISH2_IP}"
  #     INTEGRATED_TURN_LISTEN_IP: "0.0.0.0"
  #     INTEGRATED_TURN_PORT_RANGE: "50000-50500"
  #     INTEGRATED_TCP_TURN_PORT: "499999"
  #     ERLANG_COOKIE: ${SERVER_API_TOKEN}
  #     SERVER_API_TOKEN: ${SERVER_API_TOKEN}
  #     SECRET_KEY_BASE: ${SECRET_KEY_BASE}
  #     VIRTUAL_HOST: $JELLYFISH2_IP
  #     PORT: 4000
  #     RELEASE_COOKIE: ${SERVER_API_TOKEN}
  #     RELEASE_DISTRIBUTION: name
  #     RELEASE_NODE: app@$JELLYFISH2_IP
  #     NODE_NAME: app@$JELLYFISH2_IP
  #     NODES: "app@$EXTERNAL_IP app@$JELLYFISH2_IP"
  #     CHECK_ORIGIN: "${CHECK_ORIGIN:-true}"
  #   ports:
  #     - "4000:4000"
  #     - "49999:49999"
  #     - "50000-50500:50000-50500/udp"

  frontend:
    build:
      context: ./assets
      dockerfile: ./Dockerfile
      args:
        IS_REVERSY_PROXY_USED: ${IS_REVERSY_PROXY_USED:-false}
        JELLYFISH_ADDRESS: ${JELLYFISH_ADDRESS:-$DOMAIN:5002}
        BACKEND_ADDRESS: ${BACKEND_ADDRESS:-$DOMAIN:5004}
    container_name: frontend
    restart: unless-stopped
    depends_on:
      - backend
      - jellyfish1
    ports:
      - "5005:5005"

  backend:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: backend
    environment:
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      JELLYFISH_ADDRESSES: ${JELLYFISH_ADDRESSES:-jellyfish1:5002 $JELLYFISH2_IP:4000}
      SECURE_CONNECTION_JELLYFISH: ${SECURE_CONNECTION:-false}
      JELLYFISH_API_TOKEN: ${SERVER_API_TOKEN}
      PHX_SERVER: "true"
      PHX_HOST: ${BACKEND_ADDRESS:-$DOMAIN}
      PORT: 5004
    restart: unless-stopped
    depends_on:
      - jellyfish1
    ports:
      - "5004:5004"

  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    container_name: prometheus
    restart: on-failure
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      # - '--enable-feature=expand-external-labels'
    volumes:
      - prometheus_data:/prometheus
    depends_on:
      - jellyfish1

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    container_name: grafana
    restart: on-failure
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GF_SECURITY_ADMIN_PASSWORD}"
      GF_SECURITY_ADMIN_USER: "${GF_SECURITY_ADMIN_USER}"
    ports:
      - '3000:3000'
    expose:
      - 3000

volumes:
  grafana_data: {}
  prometheus_data: {}
